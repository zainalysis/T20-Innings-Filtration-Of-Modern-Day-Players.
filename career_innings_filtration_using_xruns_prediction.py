# -*- coding: utf-8 -*-
"""Career Innings Filtration Using XRuns Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Jb4bRV7ogSCXZXd568HV0pjVcved6dO

# **Mounting and Uploading Required File**
"""

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/My Drive/modelpred.csv'
df = pd.read_csv(file_path)

"""**Using Naive Average Predicting Expected Runs On A Particular Ball**"""

# Ensure necessary columns are in the correct datatype
df['inns_rr'] = pd.to_numeric(df['inns_rr'], errors='coerce')
df['inns_balls_rem'] = pd.to_numeric(df['inns_balls_rem'], errors='coerce')
df['inns_wkts'] = pd.to_numeric(df['inns_wkts'], errors='coerce')
df['batruns'] = pd.to_numeric(df['batruns'], errors='coerce')

# Group by the unique combinations of 'inns_rr', 'inns_balls_rem', and 'inns_wkts'
grouped = df.groupby(['inns_rr', 'inns_balls_rem', 'inns_wkts'])['batruns'].mean().reset_index()

# Rename the 'batruns' column to 'XRuns' in the grouped DataFrame
grouped.rename(columns={'batruns': 'XRuns'}, inplace=True)

# Merge the grouped DataFrame back into the original DataFrame
df = df.merge(grouped, on=['inns_rr', 'inns_balls_rem', 'inns_wkts'], how='left')

# Display the first few rows of the updated DataFrame
print(df.head())

# Save the updated DataFrame back to CSV
new_file_path = '/content/drive/My Drive/ball_by_ball_expectedruns.csv'
df.to_csv(new_file_path, index=False)

print("The DataFrame with the 'XRuns' column has been successfully saved to:", new_file_path)

# Add a new column 'RAAR' which is the difference between 'batruns' and 'XRuns'
df['RAAR'] = df['batruns'] - df['XRuns']

# Display the first few rows of the updated DataFrame
print(df.head())

# Save the updated DataFrame back to CSV
new_file_path = '/content/drive/My Drive/ball_by_ball_expectedruns_with_RAAR.csv'
df.to_csv(new_file_path, index=False)

print("The DataFrame with the 'RAAR' column has been successfully saved to:", new_file_path)

"""**RAAR (Impact Innings Filtration)**"""

import pandas as pd

# Load the data
df = pd.read_csv('/content/drive/My Drive/ball_by_ball_expectedruns_with_RAAR.csv', low_memory=False)

# Ensure RAAR column exists
if 'RAAR' not in df.columns:
    df['RAAR'] = df['batruns'] - df['XRuns']

# Step 1: Filter rows where wide is 0 and competition is T20I
df_filtered = df[(df['wide'] == 0)]

# Step 2: Further filter for Babar Azam's entries
babar_df = df_filtered[df_filtered['bat'] == 'Babar Azam']

# Step 3: Calculate total batruns and RAAR for each p_match
babar_summary = babar_df.groupby('p_match').agg(
    batruns_sum=('batruns', 'sum'),
    RAAR_sum=('RAAR', 'sum'),
    match_date=('date', 'first'),
    team_bat=('team_bat', 'first'),
    team_bowl=('team_bowl', 'first'),
    four_count=('outcome', lambda x: (x == 'four').sum()),
    six_count=('outcome', lambda x: (x == 'six').sum()),
    total_occurrences=('bat', 'count')
).reset_index()

# Step 4: Filter for innings where batruns_sum >= 100
babar_impact_innings = babar_summary[babar_summary['batruns_sum'] >= 100]

# Display the results
pd.set_option('display.max_rows', None)

print(babar_impact_innings)

# Save the result to a CSV file
output_file_path = '/content/drive/My Drive/babar_azam_impact_innings.csv'
babar_impact_innings.to_csv(output_file_path, index=False)

print("The filtered summary for Babar Azam has been successfully saved to:", output_file_path)

import plotly.graph_objects as go

# Create an interactive table using Plotly
fig_table = go.Figure(data=[go.Table(
    header=dict(values=list(babar_impact_innings),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[babar_impact_innings[col] for col in babar_impact_innings],
               fill_color='lavender',
               align='left'))
])

# Update layout for better readability
fig_table.update_layout(
    title="Babar Azam Centuries In Context Of The Game",
    height=600,  # You can adjust the height as needed
    width=1000,  # You can adjust the width as needed
)

# Show the table
fig_table.show()

import pandas as pd
import plotly.graph_objects as go

# Function to load the data
filepath = '/content/drive/My Drive/ball_by_ball_expectedruns_with_RAAR.csv'
def load_data(filepath):
    # Load the CSV file
    df = pd.read_csv(filepath, low_memory=False)

"""**Babar Azam in Powerplay Contextual Performance**"""

import pandas as pd

# Ensure RAAR column exists
if 'RAAR' not in df.columns:
    df['RAAR'] = df['batruns'] - df['XRuns']

# Filter rows for Babar Azam and relevant innings
babar_df = df[(df['bat'] == 'Babar Azam') & (df['inns_balls_rem'].between(84, 120))]

# List of years to process
years = [2020, 2021, 2022, 2023, 2024]
results = []

# Process each year separately
for year in years:
    # Filter data for the specific year
    year_df = babar_df[babar_df['year'] == year]

    # Aggregate data for the filtered year
    aggregated = year_df.groupby('year').agg(
        batruns_total=('batruns', 'sum'),
        RAAR_total=('RAAR', 'sum'),
        four_count=('outcome', lambda x: (x == 'four').sum()),
        six_count=('outcome', lambda x: (x == 'six').sum())
    ).reset_index()

    # Add aggregated results to the list
    results.append(aggregated)

# Concatenate results into a single DataFrame
results_df = pd.concat(results, ignore_index=True)

# Display the results
pd.set_option('display.max_rows', None)  # Show all rows
pd.set_option('display.max_columns', None)  # Show all columns
print(results_df)

import plotly.graph_objects as go

# Create an interactive table using Plotly
fig_table = go.Figure(data=[go.Table(
    header=dict(values=list(results_df),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[results_df[col] for col in results_df],
               fill_color='lavender',
               align='left'))
])

# Update layout for better readability
fig_table.update_layout(
    title="Babar Azam Contextual Performance in T20s in Powerplay Over The Years",
    height=600,  # You can adjust the height as needed
    width=1000,  # You can adjust the width as needed
)

# Show the table
fig_table.show()

"""**Babar Azam In Powerplay Overall T20s**"""

import pandas as pd
# Ensure RAAR column exists
if 'RAAR' not in df.columns:
    df['RAAR'] = df['batruns'] - df['XRuns']

# Filter rows for Babar Azam and relevant innings
babar_df = df[(df['bat'] == 'Babar Azam') & (df['inns_balls_rem'].between(84, 120))]

# Calculate the totals directly
batruns_total = babar_df['batruns'].sum()
RAAR_total = babar_df['RAAR'].sum()
four_count = babar_df['outcome'].apply(lambda x: x == 'four').sum()
six_count = babar_df['outcome'].apply(lambda x: x == 'six').sum()
total_occurrences = babar_df['bat'].count()

# Create a DataFrame for easy display and saving
aggregated_df = pd.DataFrame({
    'batruns_total': [batruns_total],
    'RAAR_total': [RAAR_total],
    'four_count': [four_count],
    'six_count': [six_count],
    'total_occurrences': [total_occurrences]
})

# Display the results
pd.set_option('display.max_rows', None)  # Show all rows
pd.set_option('display.max_columns', None)  # Show all columns
print(aggregated_df)
import plotly.graph_objects as go

# Create an interactive table using Plotly
fig_table = go.Figure(data=[go.Table(
    header=dict(values=list(aggregated_df),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[aggregated_df[col] for col in aggregated_df],
               fill_color='lavender',
               align='left'))
])

# Update layout for better readability
fig_table.update_layout(
    title="Babar Azam In Powerplay All T20s In Context Of The Game",
    height=600,  # You can adjust the height as needed
    width=1000,  # You can adjust the width as needed
)

# Show the table
fig_table.show()

"""**Babar Azam in Powerplay in T20Is Contextual Performance**"""

import pandas as pd

# Ensure RAAR column exists
if 'RAAR' not in df.columns:
    df['RAAR'] = df['batruns'] - df['XRuns']

# Filter rows for Babar Azam, relevant innings, and T20I competition
babar_df = df[(df['bat'] == 'Babar Azam') & (df['inns_balls_rem'].between(84, 120)) & (df['competition'] == 'T20I')]

# List of years to process
years = [2020, 2021, 2022, 2023, 2024]
results = []

# Process each year separately
for year in years:
    # Filter data for the specific year
    year_df = babar_df[babar_df['year'] == year]

    # Aggregate data for the filtered year
    aggregated = year_df.groupby('year').agg(
        batruns_total=('batruns', 'sum'),
        RAAR_total=('RAAR', 'sum'),
        four_count=('outcome', lambda x: (x == 'four').sum()),
        six_count=('outcome', lambda x: (x == 'six').sum()),
        total_occurrences=('bat', 'count')
    ).reset_index()

    # Add aggregated results to the list
    results.append(aggregated)

# Concatenate results into a single DataFrame
results_df = pd.concat(results, ignore_index=True)

# Display the results
pd.set_option('display.max_rows', None)  # Show all rows
pd.set_option('display.max_columns', None)  # Show all columns
print(results_df)

import plotly.graph_objects as go

# Create an interactive table using Plotly
fig_table = go.Figure(data=[go.Table(
    header=dict(values=list(results_df),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[results_df[col] for col in results_df],
               fill_color='lavender',
               align='left'))
])

# Update layout for better readability
fig_table.update_layout(
    title="Babar Azam in Powerplay in T20Is Contextual Performance Over The Years",
    height=600,  # You can adjust the height as needed
    width=1000,  # You can adjust the width as needed
)

# Show the table
fig_table.show()

"""**Innings Filration Of Big T20 Players** _If it is Failure, Cameo, Impact Innings or Scoreboard Pressure Creating Innings_"""

import pandas as pd
import plotly.graph_objects as go

# Step 1: Add RAAR column if it doesn't already exist
if 'RAAR' not in df.columns:
    df['RAAR'] = df['batruns'] - df['XRuns']

# Step 2: Filter rows where wide is 0
df_filtered = df[df['wide'] == 0]

# Step 3: Filter only the relevant batsmen
batsmen = [
    "Babar Azam", "Suryakumar Yadav", "Virat Kohli", "Rohit Sharma",
    "Mohammad Rizwan", "Devon Conway", "Travis Head", "Phill Salt",
    "Nicholas Pooran", "Jos Buttler", "Andre Russell", "Fakhar Zaman"
]
df_filtered = df_filtered[df_filtered['bat'].isin(batsmen)]

# Step 4: Calculate total sum of batruns and RAAR for each bat in each p_match
summary = df_filtered.groupby(['p_match', 'bat']).agg({
    'batruns': 'sum',
    'RAAR': 'sum',
    'bat': 'count'
}).rename(columns={'bat': 'entries'}).reset_index()

# Step 5: Label the innings
def label_innings(row):
    if row['entries'] < 12:
        if row['RAAR'] < 0:
            return 'Failure'
        else:
            return 'Cameo'
    else:
        if row['RAAR'] > 0:
            return 'Impact innings'
        else:
            return 'Scoreboard pressure creating innings'

summary['innings_label'] = summary.apply(label_innings, axis=1)

# Step 6: Loop through each batsman and create separate Plotly tables
for batsman in batsmen:
    batsman_data = summary[summary['bat'] == batsman]

    # Create a Plotly table for each batsman
    fig = go.Figure(data=[go.Table(
        header=dict(values=list(batsman_data.columns),
                    fill_color='paleturquoise',
                    align='left'),
        cells=dict(values=[batsman_data[col] for col in batsman_data.columns],
                   fill_color='lavender',
                   align='left'))
    ])

    # Show the table for each batsman
    fig.update_layout(title=f"Innings Summary for {batsman}")
    fig.show()

"""**Filtered Percentage of Each Batter**"""

import plotly.graph_objects as go
import numpy as np

# Step 7: Calculate the percentage of each innings type for each batsman (same as before)
percentage_summary = summary.groupby(['bat', 'innings_label']).agg({
    'p_match': 'count'
}).rename(columns={'p_match': 'count'}).reset_index()

# Calculate total innings per batsman
total_innings = summary.groupby('bat').agg({
    'p_match': 'count'
}).rename(columns={'p_match': 'total_innings'}).reset_index()

# Merge total innings with percentage summary
percentage_summary = pd.merge(percentage_summary, total_innings, on='bat')

# Calculate percentage of each innings type
percentage_summary['percentage'] = (percentage_summary['count'] / percentage_summary['total_innings']) * 100

# Step 8: Pivot the data to create a table where rows are batsmen and columns are innings types
pivot_table = percentage_summary.pivot(index='bat', columns='innings_label', values='percentage').fillna(0)

# Step 9: Prepare to plot each column separately with a different color scale
batsmen = pivot_table.index
innings_types = pivot_table.columns

# Define different color scales for each innings type
color_scales = ['Blues', 'Greens', 'Reds', 'Oranges']

# Create subplots with shared Y-axis for batsmen
fig = go.Figure()

# Step 10: Loop through each innings type and create separate heatmaps
for i, innings_type in enumerate(innings_types):
    # Add heatmap trace for each innings type with its own color scale
    fig.add_trace(go.Heatmap(
        z=np.array(pivot_table[innings_type]).reshape(-1, 1),  # Data for this innings type
        x=[innings_type],  # Label the column
        y=batsmen,  # Batsmen as rows
        colorscale=color_scales[i % len(color_scales)],  # Use a different color scale for each innings type
        colorbar=dict(title=f"{innings_type} %", len=0.3, y=1 - (i * 0.2))  # Position colorbar for each column
    ))

# Update layout to make sure subplots align properly
fig.update_layout(
    title="Heatmap of Innings Type Percentages with Separate Color Theories for Each Column",
    xaxis_title="Innings Type",
    yaxis_title="Batsman",
    height=600,
    width=1000,
    showlegend=False
)

# Show the combined heatmap with distinct color scales
fig.show()

import plotly.express as px

# Step 7: Calculate the percentage of each innings type for each batsman (same as before)
percentage_summary = summary.groupby(['bat', 'innings_label']).agg({
    'p_match': 'count'
}).rename(columns={'p_match': 'count'}).reset_index()

# Calculate total innings per batsman
total_innings = summary.groupby('bat').agg({
    'p_match': 'count'
}).rename(columns={'p_match': 'total_innings'}).reset_index()

# Merge total innings with percentage summary
percentage_summary = pd.merge(percentage_summary, total_innings, on='bat')

# Calculate percentage of each innings type
percentage_summary['percentage'] = (percentage_summary['count'] / percentage_summary['total_innings']) * 100

# Step 8: Pivot the data to create a table where rows are batsmen and columns are innings types
pivot_table = percentage_summary.pivot(index='bat', columns='innings_label', values='percentage').fillna(0)

# Step 9: Create a heatmap
fig = px.imshow(
    pivot_table,
    labels=dict(x="Innings Type", y="Batsman", color="Percentage"),
    x=pivot_table.columns,
    y=pivot_table.index,
    text_auto=True,  # Show the actual values inside the heatmap cells
    aspect="auto"    # Adjust aspect ratio
)

# Update layout to improve readability
fig.update_layout(
    title="Heatmap of Innings Type Percentages for Each Batsman",
    xaxis_title="Innings Type",
    yaxis_title="Batsman",
    coloraxis_colorbar=dict(title="Percentage"),
)

# Show the heatmap
fig.show()

